diff --git a/conf/env.mk b/conf/env.mk
index a603f9e..806e740 100644
--- a/conf/env.mk
+++ b/conf/env.mk
@@ -6,7 +6,7 @@
 #
 # For overview commands only, the line should read 'V = @'.
 # For overview and verbose commands, the line should read 'V ='.
-V = @
+# V = @
 
 # If your system-standard GNU toolchain is ELF-compatible, then comment
 # out the following line to use those tools (as opposed to the i386-jos-elf
@@ -17,4 +17,4 @@ V = @
 # If the makefile cannot find your QEMU binary, uncomment the
 # following line and set it to the full path to QEMU.
 #
-# QEMU=
+QEMU=/usr/bin/qemu-system-i386
diff --git a/kern/kdebug.c b/kern/kdebug.c
index 9547143..456b0e0 100644
--- a/kern/kdebug.c
+++ b/kern/kdebug.c
@@ -178,7 +178,13 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 	//	There's a particular stabs type used for line numbers.
 	//	Look at the STABS documentation and <inc/stab.h> to find
 	//	which one.
-	// Your code here.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[lline].n_desc;
+    }
+    else {
+        return -1;
+    }
 
 
 	// Search backwards from the line number for the relevant filename
diff --git a/kern/monitor.c b/kern/monitor.c
index f8a934a..c4aee14 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -24,6 +24,7 @@ struct Command {
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
+    { "backtrace", "Display backtrace of the stack", mon_backtrace },
 };
 #define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))
 
@@ -58,7 +59,26 @@ mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
 int
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
-	// Your code here.
+    cprintf("Stack backtrace:\n");
+    uint32_t *ebp = (uint32_t *)read_ebp();
+    while (ebp) {
+        cprintf("  ebp %08x ", ebp);
+        cprintf("eip %08x ", ebp[1]);
+        cprintf("args %08x %08x %08x %08x %08x\n",
+                ebp[2], ebp[3], ebp[4], ebp[5], ebp[6]);
+
+        struct Eipdebuginfo info;
+        debuginfo_eip(ebp[1], &info);
+        cprintf("   %s:%d: %.*s+%u\n",
+                info.eip_file,
+                info.eip_line,
+                info.eip_fn_namelen,
+                info.eip_fn_name,
+                ebp[1] - info.eip_fn_addr);
+
+
+        ebp = (uint32_t*)*ebp;
+    }
 	return 0;
 }
 
diff --git a/kern/pmap.c b/kern/pmap.c
index d90bd1e..9f08ddf 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -98,8 +98,15 @@ boot_alloc(uint32_t n)
 	// to a multiple of PGSIZE.
 	//
 	// LAB 2: Your code here.
+    
+    result = nextfree;
+    uint32_t will_allocate = ROUNDUP(n, PGSIZE);
+    nextfree += will_allocate;
 
-	return NULL;
+    //panic if nextfree is too big
+    KADDR(PADDR(nextfree));
+
+	return result;
 }
 
 // Set up a two-level page table:
@@ -121,7 +128,7 @@ mem_init(void)
 	i386_detect_memory();
 
 	// Remove this line when you're ready to test this function.
-	panic("mem_init: This function is not finished\n");
+	/* panic("mem_init: This function is not finished\n"); */
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -143,6 +150,7 @@ mem_init(void)
 	// each physical page, there is a corresponding struct PageInfo in this
 	// array.  'npages' is the number of physical pages in memory.
 	// Your code goes here:
+        pages = (struct PageInfo*)boot_alloc(npages * sizeof(struct PageInfo));
 
 
 	//////////////////////////////////////////////////////////////////////
@@ -167,6 +175,8 @@ mem_init(void)
 	//      (ie. perm = PTE_U | PTE_P)
 	//    - pages itself -- kernel RW, user NONE
 	// Your code goes here:
+    boot_map_region(kern_pgdir, UPAGES, npages * sizeof(struct PageInfo), PADDR(pages), PTE_U | PTE_P);
+
 
 	//////////////////////////////////////////////////////////////////////
 	// Use the physical memory that 'bootstack' refers to as the kernel
@@ -179,6 +189,7 @@ mem_init(void)
 	//       overwrite memory.  Known as a "guard page".
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
+    boot_map_region(kern_pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W);
 
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE.
@@ -188,6 +199,7 @@ mem_init(void)
 	// we just set up the mapping anyway.
 	// Permissions: kernel RW, user NONE
 	// Your code goes here:
+    boot_map_region(kern_pgdir, KERNBASE, -KERNBASE, 0, PTE_W);
 
 	// Check that the initial page directory has been set up correctly.
 	check_kern_pgdir();
@@ -246,9 +258,19 @@ page_init(void)
 	// Change the code to reflect this.
 	// NB: DO NOT actually touch the physical memory corresponding to
 	// free pages!
-	size_t i;
-	for (i = 0; i < npages; i++) {
+	for (size_t i = 0; i < npages; i++) {
 		pages[i].pp_ref = 0;
+
+        //1
+        if (i == 0) {
+            continue;
+        }
+        //2 and 3 and 4
+        if (i >= npages_basemem && i < PGNUM(PADDR(boot_alloc(0)))) {
+            continue;
+        }
+
+
 		pages[i].pp_link = page_free_list;
 		page_free_list = &pages[i];
 	}
@@ -266,8 +288,16 @@ page_init(void)
 struct PageInfo *
 page_alloc(int alloc_flags)
 {
-	// Fill this function in
-	return 0;
+    struct PageInfo* result = page_free_list;
+    if (result == NULL) {
+        return result;
+    }
+    page_free_list = page_free_list->pp_link;
+
+    if (alloc_flags & ALLOC_ZERO) {
+        memset(page2kva(result), '\0', PGSIZE);
+    }
+	return result;
 }
 
 //
@@ -277,7 +307,8 @@ page_alloc(int alloc_flags)
 void
 page_free(struct PageInfo *pp)
 {
-	// Fill this function in
+    pp->pp_link = page_free_list;
+    page_free_list = pp;
 }
 
 //
@@ -316,8 +347,31 @@ page_decref(struct PageInfo* pp)
 pte_t *
 pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
-	// Fill this function in
-	return NULL;
+    size_t pdx = PDX(va);
+    size_t ptx = PTX(va);
+
+    pte_t* result;
+
+    if (pgdir[pdx] & PTE_P) {
+        result = KADDR(PTE_ADDR(pgdir[pdx]));
+        result += ptx;
+    }
+    else {
+        if (!create) {
+            return NULL;
+        }
+        struct PageInfo* page = page_alloc(ALLOC_ZERO);
+        if (!page) return NULL;
+
+        pgdir[pdx] = page2pa(page) | PTE_U | PTE_W | PTE_P;
+
+        page->pp_ref++;
+
+        result = page2kva(page);
+        result += ptx;
+    }
+
+	return result;
 }
 
 //
@@ -333,7 +387,11 @@ pgdir_walk(pde_t *pgdir, const void *va, int create)
 static void
 boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
 {
-	// Fill this function in
+    for (size_t i = 0; i < size; i += PGSIZE) {
+        pte_t* page_pte = pgdir_walk(pgdir, (void*) (va + i), 1);
+        if (!page_pte) return;
+        *page_pte = (pa + i) | perm | PTE_P;
+    }
 }
 
 //
@@ -364,7 +422,24 @@ boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm
 int
 page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 {
-	// Fill this function in
+    pte_t* pte = pgdir_walk(pgdir, va, 1);
+    if (!pte) return -E_NO_MEM;
+    
+    physaddr_t page_pa = page2pa(pp);
+
+    if (*pte & PTE_P) {
+        if (PTE_ADDR(*pte) != page_pa) {
+            page_remove(pgdir, va);
+            tlb_invalidate(pgdir, va);
+        }
+        else {
+            *pte = page_pa | perm | PTE_P;
+            return 0;
+        }
+    }
+    pp->pp_ref++;
+    *pte = page_pa | perm | PTE_P;
+
 	return 0;
 }
 
@@ -382,8 +457,14 @@ page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 struct PageInfo *
 page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
-	// Fill this function in
-	return NULL;
+	pte_t *pte = pgdir_walk(pgdir, va, 0);
+    if (!pte) return NULL;
+
+    if (pte_store) {
+        *pte_store = pte;
+    }
+
+	return pa2page(PTE_ADDR(*pte));
 }
 
 //
@@ -404,7 +485,13 @@ page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 void
 page_remove(pde_t *pgdir, void *va)
 {
-	// Fill this function in
+    pte_t* pte;
+    struct PageInfo* page = page_lookup(pgdir, va, &pte);
+    if (page) {
+        tlb_invalidate(pgdir, va);
+        page_decref(page);
+        *pte = 0;
+    }
 }
 
 //
diff --git a/lib/printfmt.c b/lib/printfmt.c
index 28e01c9..b1de635 100644
--- a/lib/printfmt.c
+++ b/lib/printfmt.c
@@ -205,11 +205,9 @@ vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
 
 		// (unsigned) octal
 		case 'o':
-			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
+			num = getuint(&ap, lflag);
+			base = 8;
+			goto number;
 
 		// pointer
 		case 'p':
